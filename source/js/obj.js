// function bold(a, b = 1) {
//     return a / b;
// };
//
// console.log(bold(4));

// Что такое объект в JS - это контейнер Ключей и Свойств

var obj = {

    1 : 'пн',
    2 : 'вт',
    3 : 'ср',
    4 : 'чт',
    prop : 1,
    ppdcfc : 'fdcdfc',
    func : function (){}   // свойство объекта - МЕТОД, т.е. это функция - которая находится в объекте
};

// значением свойства объекта может быть все кроме undefined (даже другой объект)
// свойства разделяются запятой

var nobj ={
    xdjfc  : 'c cdcc',
    ggl : function () {
        console.log( this.xdjfc );  ///// this это указатель на наш объект, равносильно записи obj.xdjfc
    }
    
};

nobj.ggl(); // вызываем ф-ю


// чтобы достать свойство можно использовать . или  obj[''] нотации
// [] используются для выведения переменных

var prop = '1';
var gop = 'func';

// если берем несуществующее свойство можно использовать значение по умолчания через || - логический оператор ИЛИ

console.log( obj.ffff || 'name' );

// присвоение - так же как доставать

obj.addd = 'GAD';

console.log( obj );

obj.ppdcfc = 'Banan';

console.log( obj );

console.log( typeof obj.func );
console.log( obj.ppdcfc );
console.log( obj['1'] );


// объекты всегда передаются по ссылке - не копируются

var a={},
    b={},
    c={};

console.log(a,b,c);

a=b=c={prop : 'allthesame'};

console.log(a,b,c);

// то объект передается по ссылке и не копируется

//удаление св-в

delete obj.prop;


// ГЛОБАЛЬНОСТЬ
// в JS все переменные являются глобальными по умолчанию

// в идеале делается 1 глоб переменная-объект

var MYAPP = {
    // в нем пишутся все свойства и методы которые пишутся в данном приложении
    // это решает проблемы при использовании разных библиотек и других скриптов
};